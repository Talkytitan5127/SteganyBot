# -*- coding: utf-8 -*-
"""
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–ø–∏—Å—ã–≤–∞–µ—Ç telegram-–±–æ—Ç–∞ "SteganyBot"
"""

from telegram import KeyboardButton, ReplyKeyboardMarkup
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram import ReplyKeyboardRemove, File
from telegram.ext import Updater, CommandHandler
from telegram.ext import MessageHandler, Filters, Dispatcher
from telegram.ext import CallbackQueryHandler, RegexHandler
from time import sleep
import logging
import Strings
from os import listdir, remove, environ
from random import randint
from algorithm import *
from datawork import *

# Enable logging
logging.basicConfig(format="""%(asctime)s - %(name)s
                     - %(levelname)s - %(message)s""",
                    level=logging.INFO)

logger = logging.getLogger(__name__)

#: —Ñ–ª–∞–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
global UsersFlags


def InitDict():
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤ –≤ UsersFlags –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,
    —á—å–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    temp = {
        "flagEncrypt": False,
        "flagDecrypt": False,
        "getAskUser": False,
        "flagUpload": False,
        "OnlyDepart": False,
        "pathtofile": None,
        "pathUserpic": None,
        "length": 2048
        }
    postredb = DataBase()
    postredb.cur.execute("SELECT * from users;")
    result = postredb.cur.fetchall()
    for i in result:
        UsersFlags[i[-1]] = temp.copy()


def ChangeFlags(num_id, *args):
    """
    –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–ª–∞–≥–∞

    Args:
        num_id (int): –Ω–æ–º–µ—Ä —á–∞—Ç–∞
        *args: –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–ª–∞–≥–æ–≤
    """
    for i in args:
        UsersFlags[num_id][i] = not UsersFlags[num_id][i]


def SetArgs(num_id, path, *args):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–ª–∞–≥–æ–≤ –¥–∞–Ω–Ω—ã–º–∏

    Args:
        num_id (int): –Ω–æ–º–µ—Ä —á–∞—Ç–∞
        path (str): –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞
        *args: –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–ª–∞–≥–æ–≤
    """
    UsersFlags[num_id][path] = args[0]


class SteganyBot:
    """
    –ö–ª–∞—Å—Å —Ä–µ–∞–ª–∏–∑—É–µ—Ç telegram-–±–æ—Ç–∞ "@StegyJpgBot"

    Attributes:
        __token (:obj:`str`): —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        updater (:class:`telegram.ext.Updater`): –æ–±—ä–µ–∫—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç
            –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        dispatcher (:class:`telegram.ext.Dispatcher`): –æ–±—ä–µ–∫—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç
            –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    """
    # initialisation bot
    def __init__(self, Token):
        self.__token = Token
        self.updater = Updater(self.__token)
        self.dispatcher = self.updater.dispatcher

    # /start
    def Start(self, bot, update):
        """
        –ú–µ—Ç–æ–¥ –±–æ—Ç–∞ "/start"

         Args:
            bot (:class:`telegram.Bot`): —Ö—ç–Ω–¥–ª–µ—Ä –±–æ—Ç–∞
            update(:class:`telegram.ext.Updater`): –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        logger.info("method start")
        num_id = update.message.chat.id
        update.message.reply_text(text=Strings.startGreet)
        #: –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        userData = self.ParseUpdate(update.message)
        postgredb = DataBase()
        info = postgredb.AddUser(userData)
        logger.info(info)
        if Strings.AnswerStatus[info] == 365:
            update.message.reply_text(Strings.addUsername)
        self.Refresh()
        #: inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard = [[KeyboardButton("/info ‚Ñπ")],
                    [KeyboardButton("/play üéÆ")],
                    [KeyboardButton("/help ‚ùì")]
                    ]
        reply_markup = ReplyKeyboardMarkup(
            keyboard,
            one_time_keyboard=True,
            resize_keyboard=True)
        update.message.reply_text('Please choose:', reply_markup=reply_markup)
        return logger.info("Done start")

    def Refresh(self):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å —Ñ–ª–∞–≥–∞–º–∏
        """
        db = DataBase()
        db.cur.execute("SELECT * FROM users;")
        for i in db.cur.fetchall():
            if i[-1] not in UsersFlags:
                UsersFlags[i[-1]] = temp.copy()

    def Restore(self):
        """
        –û–±–Ω—É–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤ –¥–ª—è encrypt, decrypt, upload, depart
        """
        for k in UsersFlags:
            UsersFlags[k]['flagEncrypt'] = False
            UsersFlags[k]['flagDecrypt'] = False
            UsersFlags[k]['flagUpload'] = False
            UsersFlags[k]['OnlyDepart'] = False

    # /info
    def Info(self, bot, update):
        """
        –ú–µ—Ç–æ–¥ –±–æ—Ç–∞ "/info"

        Args:
            bot (:class:`telegram.Bot`): —Ö—ç–Ω–¥–ª–µ—Ä –±–æ—Ç–∞
            update(:class:`telegram.ext.Updater`): –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

        """
        logger.info("Info method")
        update.message.reply_text(text=Strings.info)

    # /play
    def Play(self, bot, update):
        """
        –ú–µ—Ç–æ–¥ –±–æ—Ç–∞ "/play"
        Args:
            bot (:class:`telegram.Bot`): —Ö—ç–Ω–¥–ª–µ—Ä –±–æ—Ç–∞
            update(:class:`telegram.ext.Updater`): –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

        """
        logger.info("Method play")
        update.message.reply_text(text=Strings.greeting2)
        keyboard = [[KeyboardButton("/encrypt ‚úâ‚û°üóª"),
                     KeyboardButton("/decrypt üóª‚û°‚úâ")],
                    [KeyboardButton("/upload picture"),
                     KeyboardButton("/depart")]]
        reply_markup = ReplyKeyboardMarkup(
            keyboard,
            one_time_keyboard=True,
            resize_keyboard=True
            )
        update.message.reply_text('Please choose:', reply_markup=reply_markup)
        return logger.info("game begins")

    # parsing string
    def ParseUpdate(self, text):
        """
        –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏

        Args:
            text (:obj:`str`): —Å—Ç—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            :obj:`list`: –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (username, –∏–º—è,
                —Ñ–∞–º–∏–ª–∏—è, –Ω–æ–º–µ—Ä —á–∞—Ç–∞)

        """
        username = text.chat.username
        first = text.chat.first_name
        last = text.chat.last_name
        chat_id = text.chat.id
        return [username, first, last, chat_id]

    #: –û–±—Ä–∞–±–æ—Ç–∫–∞ /encrypt
    def Encrypt(self, bot, update):
        """
        –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ /encrypt

        Args:
            bot (:class:`telegram.Bot`): —Ö—ç–Ω–¥–ª–µ—Ä –±–æ—Ç–∞
            update(:class:`telegram.ext.Updater`): –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        num_id = self.GetId(bot, update)
        self.Restore()
        if UsersFlags[num_id]['pathUserpic'] is not None:
                self.GetLength(bot, update)
        ChangeFlags(num_id, 'flagEncrypt')
        self.AskText(bot, update)
        logger.info("choose to encrypt")

    #: –æ–±—Ä–∞–±–æ—Ç–∫–∞ /decrypt
    def Decrypt(self, bot, update):
        """
        –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ /decrypt

        Args:
            bot (:class:`telegram.Bot`): —Ö—ç–Ω–¥–ª–µ—Ä –±–æ—Ç–∞
            update(:class:`telegram.ext.Updater`): –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        num_id = self.GetId(bot, update)
        self.Restore()
        ChangeFlags(num_id, 'flagDecrypt')
        self.AskPicture(bot, update)
        logger.info("choose to decrypt")

    #: –æ–±—Ä–∞–±–æ—Ç–∫–∞ /upload
    def Upload(self, bot, update):
        """
        –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ /upload

        Args:
            bot (:class:`telegram.Bot`): —Ö—ç–Ω–¥–ª–µ—Ä –±–æ—Ç–∞
            update(:class:`telegram.ext.Updater`): –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        num_id = self.GetId(bot, update)
        self.Restore()
        ChangeFlags(num_id, 'flagUpload')
        self.AskPicture(bot, update)

    def Echo(self, bot, update):
        """
        –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º

        Args:
            bot (:class:`telegram.Bot`): —Ö—ç–Ω–¥–ª–µ—Ä –±–æ—Ç–∞
            update(:class:`telegram.ext.Updater`): –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

        """
        update.message.reply_text(update.message.text)
        logger.info("message was sent")
        return "text replied"

    def SendPicture(self, bot, update, user=None):
        """
        –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ png-—Ñ–∞–π–ª–∞:
            + –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
            + –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç—è—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ

        Args:
            bot (:class:`telegram.Bot`): —Ö—ç–Ω–¥–ª–µ—Ä –±–æ—Ç–∞
            update(:class:`telegram.ext.Updater`): –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            user (:obj:`str`, optional): username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∞–¥—Ä–µ—Å–∞—Ç–∞

        """
        chatId = update.message.chat.id
        if UsersFlags[chatId]['pathtofile'] is None:
            update.message.reply_text("No picture to send you")
            return
        if user is None:
            update.message.reply_text("Get the picture")
            update.message.reply_document(
                open(UsersFlags[chatId]['pathtofile'], "rb"))
            update.message.reply_text("Downloaded successful")
        else:
            # get user's id
            postgredb = DataBase()
            num_id = int(postgredb.GetId(user))
            answer = Strings.messageUser.format(update.message.chat.username)
            bot.send_message(text=answer, chat_id=num_id)
            bot.send_document(
                document=open(UsersFlags[chatId]['pathtofile'], "rb"),
                chat_id=num_id)
            update.message.reply_text("Sending was successful")
        SetArgs(chatId, 'pathtofile', None)

    def SendPicToUser(self, bot, update):
        """
        –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ png-—Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        Args:
            bot (:class:`telegram.Bot`): —Ö—ç–Ω–¥–ª–µ—Ä –±–æ—Ç–∞
            update(:class:`telegram.ext.Updater`): –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

        """
        self.SendPicture(bot, update)

    def AskChooseUser(self, bot, update):
        """
        –ü–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
            + –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É
            + –ù–∞–ø–∏—Å–∞—Ç—å username –∞–¥—Ä–µ—Å–∞—Ç–∞

        Args:
            bot (:class:`telegram.Bot`): —Ö—ç–Ω–¥–ª–µ—Ä –±–æ—Ç–∞
            update(:class:`telegram.ext.Updater`): –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        num_id = self.GetId(bot, update)
        if UsersFlags[num_id]['pathtofile'] is None:
            self.AskPicture(bot, update)
            ChangeFlags(num_id, "OnlyDepart")

        else:
            bot.send_message(text=Strings.askUser, chat_id=num_id)
            ChangeFlags(num_id, 'getAskUser')

    # user use bot or not
    def CheckUser(self, bot, update, user):
        """
        –û–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å png-—Ñ–∞–π–ª

        Args:
            bot (:class:`telegram.Bot`): —Ö—ç–Ω–¥–ª–µ—Ä –±–æ—Ç–∞
            update(:class:`telegram.ext.Updater`): –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            user (:obj:`str`): username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Note:
            –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Ç–æ
            —Å–æ–æ–±—â–∏—Ç—å –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø—Ä–∏—Å–ª–∞—Ç—å –µ–º—É png-—Ñ–∞–π–ª.
        """
        postgredb = DataBase()
        user = user.split()
        user = user[0][1:]
        fl = postgredb.AskUserName(user)
        num_id = update.message.chat.id
        ChangeFlags(num_id, 'getAskUser')
        if fl:
            self.SendPicture(bot, update, user=user)
        else:
            update.message.reply_text("your input username: {}".format(user))
            update.message.reply_text(Strings.addFriendUser)
            self.SendPicture(bot, update)

    def MakePath(self, folder):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏-–ø—É—Ç–∏

        Args:
            folder (:obj:`str`): –ø–∞–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è

        Returns:
            :obj:`str`: –ü—É—Ç—å –¥–æ –ø–∞–ø–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        """
        path = "photos/"
        path += folder + '/'
        return path

    def EncryptMessage(self, bot, update, letter):
        """
        –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤ png-—Ñ–∞–π–ª

        Args:
            bot (:class:`telegram.Bot`): —Ö—ç–Ω–¥–ª–µ—Ä –±–æ—Ç–∞
            update(:class:`telegram.ext.Updater`): –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            letter (:obj:`str`): –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        """
        logger.info("\'EncryptMessage\'")
        obj = Container()
        num_id = update.message.chat.id
        #: –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤ png-—Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if UsersFlags[num_id]['pathUserpic'] is None:
            path = self.MakePath("encrypt")
            rang = len(listdir(path))
            photo_id = str(randint(1, rang))
            obj.SetModule(path + "photo" + photo_id + ".png")
            self.ClearDir("photos/decrypt/")
        #: –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
        else:
            obj.SetModule(UsersFlags[num_id]['pathUserpic'])
        obj.SetUser(update.message.chat.username)
        status = obj.Encrypt(letter)
        if status == 127:
            update.message.reply_text("Something wrong with message's length")
        filepath = obj.Save()
        #: –∑–∞–ø—Ä–æ—Å –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        SetArgs(num_id, 'pathtofile', filepath)
        update.message.reply_text("Successful! Picture is ready")
        logger.info("Encryption success")
        ChangeFlags(num_id, 'flagEncrypt')
        SetArgs(num_id, 'pathUserpic', None)
        UsersFlags[num_id]["length"] = 2048
        update.message.reply_text(Strings.afterEncrypt)

    def DecryptMessage(self, bot, update, number):
        """
        –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ png-—Ñ–∞–π–ª–∞

        Args:
            bot (:class:`telegram.Bot`): —Ö—ç–Ω–¥–ª–µ—Ä –±–æ—Ç–∞
            update(:class:`telegram.ext.Updater`): –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            number (:obj:`int`): –±—É–¥—É—â–∏–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ

        """
        logger.info("DecryptMessage")
        num_id = self.GetId(bot, update)
        #: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–∞—Ä—Ç–∏–Ω–∫—É
        #:    –±–µ–∑ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è "/decrypt"
        if not UsersFlags[num_id]['flagDecrypt']:
            update.message.reply_text(Strings.getPic)
            return "Not yet"
        else:
            obj = Container()
            if UsersFlags[num_id]["pathUserpic"] is None:
                path = self.MakePath("fromUser")
                path += "photo" + str(number) + ".png"
                obj.SetModule(path)
            else:
                obj.SetModule(UsersFlags[num_id]["pathUserpic"])
            text = obj.Decrypt()
            answer = "extracted message => " + text
            bot.send_message(text=answer, chat_id=num_id)
            ChangeFlags(num_id, 'flagDecrypt')
            SetArgs(num_id, 'pathUserpic', None)
            logger.info("decryption success")

    def Help(self, bot, update):
        """
        –ú–µ—Ç–æ–¥ –±–æ—Ç–∞ "/help"

        Args:
            bot (:class:`telegram.Bot`): —Ö—ç–Ω–¥–ª–µ—Ä –±–æ—Ç–∞
            update(:class:`telegram.ext.Updater`): –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

        """
        logger.info("Help")
        update.message.reply_text(Strings.helpString)

    def GetId(self, bot, update):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞

        Args:
            bot (:class:`telegram.Bot`): —Ö—ç–Ω–¥–ª–µ—Ä –±–æ—Ç–∞
            update(:class:`telegram.ext.Updater`): –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        Returns:
            :obj:`int`: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        """
        num_id = 0
        try:
            num_id = update.message.chat.id
        except Exception:
            num_id = update.callback_query.message.chat.id
        return num_id

    def Picture(self, bot, update):
        """
        Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã
        –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            bot (:class:`telegram.Bot`): —Ö—ç–Ω–¥–ª–µ—Ä –±–æ—Ç–∞
            update(:class:`telegram.ext.Updater`): –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

        """
        keyboard = [[
                    InlineKeyboardButton("encrypt", callback_data=0),
                    InlineKeyboardButton("decrypt", callback_data=1),
                    InlineKeyboardButton("depart", callback_data=2)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text('Please choose:', reply_markup=reply_markup)

    def ProcessButton(self, bot, update):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

        Args:
            bot (:class:`telegram.Bot`): —Ö—ç–Ω–¥–ª–µ—Ä –±–æ—Ç–∞
            update(:class:`telegram.ext.Updater`): –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        query = update.callback_query
        data = int(query.data)
        num_id = query.message.chat.id
        if data == 0:
            self.Encrypt(bot, update)
        elif data == 1:
            self.Restore()
            ChangeFlags(num_id, 'flagDecrypt')
            self.DecryptMessage(bot, update, number=2)
        elif data == 2:
            SetArgs(num_id, 'pathtofile', UsersFlags[num_id]["pathUserpic"])
            SetArgs(num_id, 'pathUserpic', None)
            self.AskChooseUser(bot, update)

    def AnswerLog(self, bot, update):
        """
        –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –±–æ—Ç–∞

        Args:
            bot (:class:`telegram.Bot`): —Ö—ç–Ω–¥–ª–µ—Ä –±–æ—Ç–∞
            update(:class:`telegram.ext.Updater`): –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

        """
        logger.info("Log method")
        ID = update.message.chat.id
        Answer = "Me writing from chat: " + str(ID)
        Answer += "\nUser => " + str(update.message.chat.username)
        Answer += "\nFull Name => " + str(update.message.chat.first_name)
        Answer += " " + str(update.message.chat.last_name)
        num_id = 243247509  #: –Ω–æ–º–µ—Ä —á–∞—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        bot.send_message(text=Answer, chat_id=num_id)
        return logger.info("log was sent")

    def GetText(self, bot, update):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            bot (:class:`telegram.Bot`): —Ö—ç–Ω–¥–ª–µ—Ä –±–æ—Ç–∞
            update(:class:`telegram.ext.Updater`): –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

        """
        logger.info("GetText")
        num_id = update.message.chat.id
        text = update.message.text
        #: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        if UsersFlags[num_id]['flagEncrypt']:
            self.EncryptMessage(bot, update, letter=text)
        #: –æ–±—Ä–∞–±–æ—Ç–∫–∞ username'a
        elif UsersFlags[num_id]['getAskUser']:
            self.CheckUser(bot, update, user=text)
        #: —ç—Ö–æ-–æ—Ç–≤–µ—Ç
        else:
            self.Echo(bot, update)
        self.AnswerLog(bot, update)
        return logger.info("GetText done")

    def GetLength(self, bot, update):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–∑–º–æ–∂–Ω–æ–π –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É

        Args:
            bot (:class:`telegram.Bot`): —Ö—ç–Ω–¥–ª–µ—Ä –±–æ—Ç–∞
            update(:class:`telegram.ext.Updater`): –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

        """
        num_id = self.GetId(bot, update)
        obj = Container()
        obj.SetModule(UsersFlags[num_id]['pathUserpic'])
        length = obj.CheckLength()
        UsersFlags[num_id]["length"] = length

    def ClearDir(self, path, num=5):
        """
        –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏

        Args:
            path (:obj:`str`): –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            num (:obj:`int`, optional): –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
        """
        if (len(listdir(path)) > num):
            for i in listdir(path):
                remove(path + i)

    def GetDoc(self, bot, update):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

        Args:
            bot (:class:`telegram.Bot`): —Ö—ç–Ω–¥–ª–µ—Ä –±–æ—Ç–∞
            update(:class:`telegram.ext.Updater`): –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

        """
        logger.info("\'getDoc\'")
        user = update.message.chat.username
        num_id = update.message.chat.id
        photo_file = bot.get_file(update.message.document.file_id)
        #: –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ª—é–±–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
        if UsersFlags[num_id]['OnlyDepart']:
            path = self.MakePath("UserPicture")
            num = len(listdir(path)) + 1
            self.ClearDir(path, num=20)
            path += str(user) + str(num) + ".png"
            SetArgs(num_id, 'pathtofile', path)
            photo_file.download(path)
            update.message.reply_text(Strings.askUser)
            ChangeFlags(num_id, 'getAskUser', 'OnlyDepart')
        #: –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        elif UsersFlags[num_id]['flagDecrypt']:
            path = self.MakePath("fromUser")
            num = len(listdir(path)) + 1
            self.ClearDir(path)
            path += "photo" + str(num) + ".png"
            photo_file.download(path)
            self.DecryptMessage(bot, update, number=num)
        #: –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
        elif UsersFlags[num_id]["flagUpload"]:
            path = self.MakePath("UserPicture")
            num = len(listdir(path)) + 1
            self.ClearDir(path, num=20)
            path += str(user) + str(num) + ".png"
            ChangeFlags(num_id, 'flagUpload')
            SetArgs(num_id, 'pathUserpic', path)
            photo_file.download(path)
            logger.info("Upload success")
            update.message.reply_text(Strings.uploadSuccess)
        else:
            path = self.MakePath("UserPicture")
            num = len(listdir(path)) + 1
            self.ClearDir(path, num=20)
            path += str(user) + str(5127) + ".png"
            SetArgs(num_id, 'pathUserpic', path)
            photo_file.download(path)
            self.Picture(bot, update)
        return logger.info("GetDoc success")

    def ExplicitPhoto(self, bot, update):
        """
        –ó–∞–ø—Ä–µ—â–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π

        Args:
            bot (:class:`telegram.Bot`): —Ö—ç–Ω–¥–ª–µ—Ä –±–æ—Ç–∞
            update(:class:`telegram.ext.Updater`): –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

        """
        update.message.reply_text(Strings.answerPhoto)

    def Error(self, bot, update, error):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

        Args:
            bot (:class:`telegram.Bot`): —Ö—ç–Ω–¥–ª–µ—Ä –±–æ—Ç–∞
            update(:class:`telegram.ext.Updater`): –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

        """
        logger.warn('Update "%s" caused error "%s"' % (update, error))

    def AskText(self, bot, update):
        """
        –ó–∞–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –≤ png-—Ñ–∞–π–ª

        Args:
            bot (:class:`telegram.Bot`): —Ö—ç–Ω–¥–ª–µ—Ä –±–æ—Ç–∞
            update(:class:`telegram.ext.Updater`): –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

        """
        num_id = self.GetId(bot, update)
        string = "Send me a message you want to encrypt\n"
        string += Strings.lengthMessage.format(
            UsersFlags[num_id]["length"],
            UsersFlags[num_id]["length"] // 2)
        bot.send_message(text=string, chat_id=num_id)

    def AskPicture(self, bot, update):
        """
        –ó–∞–ø—Ä–æ—Å –æ–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è:
            + –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            + –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        Args:
            bot (:class:`telegram.Bot`): —Ö—ç–Ω–¥–ª–µ—Ä –±–æ—Ç–∞
            update(:class:`telegram.ext.Updater`): –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

        """
        num_id = self.GetId(bot, update)
        bot.send_message(text=Strings.uploadpicture, chat_id=num_id)

    def AddHandler(self):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –≤ –î–∏—Å–ø–∞—Ç—á–µ—Ä
        """
        self.dispatcher.add_handler(CommandHandler(
            "start", self.Start)
            )
        self.dispatcher.add_handler(CommandHandler(
            "play", self.Play)
            )
        self.dispatcher.add_handler(CommandHandler(
            "help", self.Help)
            )
        self.dispatcher.add_handler(CommandHandler(
            "encrypt", self.Encrypt)
            )
        self.dispatcher.add_handler(CommandHandler(
            "decrypt", self.Decrypt)
            )
        self.dispatcher.add_handler(CommandHandler(
            "upload", self.Upload)
            )
        self.dispatcher.add_handler(CommandHandler(
            "info", self.Info)
            )
        self.dispatcher.add_handler(MessageHandler(
            Filters.text, self.GetText)
            )
        self.dispatcher.add_handler(MessageHandler(
            Filters.document, self.GetDoc)
            )
        self.dispatcher.add_handler(MessageHandler(
            Filters.photo, self.ExplicitPhoto)
            )
        self.dispatcher.add_handler(CommandHandler(
            "Log", self.AnswerLog)
            )
        self.dispatcher.add_handler(CommandHandler(
            "picture", self.SendPicToUser)
            )
        self.dispatcher.add_handler(CommandHandler(
            "depart", self.AskChooseUser)
            )
        self.dispatcher.add_handler(CallbackQueryHandler(
            self.ProcessButton)
            )
        self.dispatcher.add_error_handler(self.Error)

    def StartBot(self):
        """
        –ó–∞–ø—É—Å–∫ telegram-–±–æ—Ç–∞
        """
        self.AddHandler()
        self.updater.start_polling()
        self.updater.idle()


if __name__ == '__main__':
    """
    Main
    """
    token = environ["TOKEN"]
    bot = SteganyBot(token)
    UsersFlags = {}
    InitDict()
    bot.StartBot()
